**前置知识**：[滑动窗口【基础算法精讲 03】](https://www.bilibili.com/video/BV1hd4y1r7Gq/)。

从小到大枚举子串右端点 $\textit{right}$，同时用哈希表/数组统计每种字母的出现次数。如果子串符合要求（三种字母都至少出现一次），则右移左端点 $\textit{left}$，直到不符合要求为止。

内层循环结束后，$[\textit{left},\textit{right}]$ 这个子串是不满足题目要求的，但在退出循环之前的最后一轮循环，$[\textit{left}-1,\textit{right}]$ 是满足题目要求的。由于子串越长，越能满足题目要求，所以除了 $[\textit{left}-1,\textit{right}]$，还有 $[\textit{left}-2,\textit{right}],[\textit{left}-3,\textit{right}],\ldots,[0,\textit{right}]$ 都是满足要求的。也就是说，当右端点**固定**在 $\textit{right}$ 时，左端点在 $0,1,2,\ldots,\textit{left}-1$ 的所有子串都是满足要求的，这一共有 $\textit{left}$ 个，加到答案中。

### 答疑

**问**：为什么这个算法可以**不重不漏**地统计所有子串？

**答**：从暴力做法说起。我们可以外层循环枚举子串右端点，内层循环枚举子串左端点，然后判断子串是否合法，合法就把答案加一。这种暴力做法必然不会漏算多算。滑动窗口是对暴力做法的优化，保留了「**外层循环枚举右端点**」的思路，把内层循环枚举左端点的过程优化成了均摊 $\mathcal{O}(1)$。本质和暴力是一样的，自然不会漏算多算。代码中的 `ans += left` 是统计右端点固定的情况下，有多少个左端点可以让子串合法。

* [sol-Python3]

```py
class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        ans = left = 0
        cnt = defaultdict(int)
        for c in s:
            cnt[c] += 1
            while len(cnt) == 3:
                out = s[left]  # 离开窗口的字母
                cnt[out] -= 1
                if cnt[out] == 0:
                    del cnt[out]
                left += 1
            ans += left
        return ans
```

* [sol-Python3写法二]

```py
class Solution:
    def numberOfSubstrings(self, s: str) -> int:
        ans = left = 0
        cnt = [0] * 3
        for c in s:
            cnt[ord(c) - ord('a')] += 1
            while cnt[0] and cnt[1] and cnt[2]:
                cnt[ord(s[left]) - ord('a')] -= 1
                left += 1
            ans += left
        return ans
```

* [sol-Java]

```java
class Solution {
    public int numberOfSubstrings(String S) {
        char[] s = S.toCharArray();
        int ans = 0;
        int left = 0;
        int[] cnt = new int[3];
        for (char c : s) {
            cnt[c - 'a']++;
            while (cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0) {
                cnt[s[left] - 'a']--;
                left++;
            }
            ans += left;
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int numberOfSubstrings(string s) {
        int ans = 0, left = 0;
        int cnt[3]{};
        for (char c : s) {
            cnt[c - 'a']++;
            while (cnt[0] && cnt[1] && cnt[2]) {
                cnt[s[left] - 'a']--;
                left++;
            }
            ans += left;
        }
        return ans;
    }
};
```

* [sol-C]

```c
int numberOfSubstrings(char* s) {
    int ans = 0, left = 0;
    int cnt[3] = {};
    for (int right = 0; s[right]; right++) {
        cnt[s[right] - 'a']++;
        while (cnt[0] && cnt[1] && cnt[2]) {
            cnt[s[left] - 'a']--;
            left++;
        }
        ans += left;
    }
    return ans;
}
```

* [sol-Go]

```go
func numberOfSubstrings(s string) (ans int) {
    cnt := [3]int{}
    left := 0
    for _, c := range s {
        cnt[c-'a']++
        for cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0 {
            cnt[s[left]-'a']--
            left++
        }
        ans += left
    }
    return
}
```

* [sol-JavaScript]

```js
var numberOfSubstrings = function(s) {
    let ans = 0, left = 0;
    const cnt = [0, 0, 0];
    for (let right = 0; right < s.length; right++) {
        cnt[s.charCodeAt(right) - 'a'.charCodeAt(0)]++;
        while (cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0) {
            cnt[s.charCodeAt(left) - 'a'.charCodeAt(0)]--;
            left++;
        }
        ans += left;
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn number_of_substrings(s: String) -> i32 {
        let s = s.as_bytes();
        let mut ans = 0;
        let mut left = 0;
        let mut cnt = [0; 3];
        for &c in s {
            cnt[(c - b'a') as usize] += 1;
            while cnt[0] > 0 && cnt[1] > 0 && cnt[2] > 0 {
                cnt[(s[left] - b'a') as usize] -= 1;
                left += 1;
            }
            ans += left;
        }
        ans as _
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$ 或 $\mathcal{O}(n|\Sigma|)$，其中 $n$ 是 $s$ 的长度，$|\Sigma|=3$ 是字符集合的大小。哈希表写法是 $\mathcal{O}(n)$，数组写法是 $\mathcal{O}(n|\Sigma|)$。
- 空间复杂度：$\mathcal{O}(|\Sigma|)$。

注：数组写法可以做到 $\mathcal{O}(n)$ 时间，见 [76. 最小覆盖子串的题解](https://leetcode.cn/problems/minimum-window-substring/solutions/2713911/liang-chong-fang-fa-cong-o52mn-dao-omnfu-3ezz/)。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
