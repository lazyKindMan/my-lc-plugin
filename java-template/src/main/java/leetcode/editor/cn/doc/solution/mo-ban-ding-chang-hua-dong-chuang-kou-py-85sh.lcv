## 定长滑窗套路

我总结成三步：**入-更新-出**。

1. **入**：下标为 $i$ 的元素进入窗口，窗口元素和 $s$ 增加 $\textit{arr}[i]$。如果 $i<k-1$ 则重复第一步。
2. **更新**：更新答案。本题由于窗口长度固定为 $k$，所以平均值 $\ge \textit{threshold}$ 相当于窗口元素和 $\ge k\cdot \textit{threshold}$。如果满足这个不等式则答案加一。
3. **出**：下标为 $i-k+1$ 的元素离开窗口，窗口元素和 $s$ 减少 $\textit{arr}[i-k+1]$。

以上三步适用于所有定长滑窗题目。

详细讲解见[【套路】教你解决定长滑窗！适用于所有定长滑窗题目！](https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/solutions/2809359/tao-lu-jiao-ni-jie-jue-ding-chang-hua-ch-fzfo/)

* [sol-Python3]

```py
class Solution:
    def numOfSubarrays(self, arr: List[int], k: int, threshold: int) -> int:
        ans = s = 0  # 维护窗口元素和
        for i, x in enumerate(arr):
            # 1. 进入窗口
            s += x
            if i < k - 1:  # 窗口大小不足 k
                continue
            # 2. 更新答案
            if s >= k * threshold:
                ans += 1
            # 3. 离开窗口
            s -= arr[i - k + 1]
        return ans
```

* [sol-Java]

```java
class Solution {
    public int numOfSubarrays(int[] arr, int k, int threshold) {
        int ans = 0;
        int s = 0; // 维护窗口元素和
        for (int i = 0; i < arr.length; i++) {
            // 1. 进入窗口
            s += arr[i];
            if (i < k - 1) { // 窗口大小不足 k
                continue;
            }
            // 2. 更新答案
            if (s >= k * threshold) {
                ans++;
            }
            // 3. 离开窗口
            s -= arr[i - k + 1];
        }
        return ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int numOfSubarrays(vector<int>& arr, int k, int threshold) {
        int ans = 0;
        int s = 0; // 维护窗口元素和
        for (int i = 0; i < arr.size(); i++) {
            // 1. 进入窗口
            s += arr[i];
            if (i < k - 1) { // 窗口大小不足 k
                continue;
            }
            // 2. 更新答案
            ans += s >= k * threshold;
            // 3. 离开窗口
            s -= arr[i - k + 1];
        }
        return ans;
    }
};
```

* [sol-C]

```c
int numOfSubarrays(int* arr, int arrSize, int k, int threshold) {
    int ans = 0;
    int s = 0; // 维护窗口元素和
    for (int i = 0; i < arrSize; i++) {
        // 1. 进入窗口
        s += arr[i];
        if (i < k - 1) { // 窗口大小不足 k
            continue;
        }
        // 2. 更新答案
        ans += s >= k * threshold;
        // 3. 离开窗口
        s -= arr[i - k + 1];
    }
    return ans;
}
```

* [sol-Go]

```go
func numOfSubarrays(arr []int, k, threshold int) (ans int) {
    s := 0 // 维护窗口元素和
    for i, x := range arr {
        // 1. 进入窗口
        s += x
        if i < k-1 { // 窗口大小不足 k
            continue
        }
        // 2. 更新答案
        if s >= k*threshold {
            ans++
        }
        // 3. 离开窗口
        s -= arr[i-k+1]
    }
    return
}
```

* [sol-JavaScript]

```js
var numOfSubarrays = function(arr, k, threshold) {
    let ans = 0;
    let s = 0; // 维护窗口元素和
    for (let i = 0; i < arr.length; i++) {
        // 1. 进入窗口
        s += arr[i];
        if (i < k - 1) { // 窗口大小不足 k
            continue;
        }
        // 2. 更新答案
        if (s >= k * threshold) {
            ans++;
        }
        // 3. 离开窗口
        s -= arr[i - k + 1];
    }
    return ans;
};
```

* [sol-Rust]

```rust
impl Solution {
    pub fn num_of_subarrays(arr: Vec<i32>, k: i32, threshold: i32) -> i32 {
        let mut ans = 0;
        let mut s = 0; // 维护窗口元素和
        for (i, &x) in arr.iter().enumerate() {
            // 1. 进入窗口
            s += x;
            if i < k as usize - 1 { // 窗口大小不足 k
                continue;
            }
            // 2. 更新答案
            if s >= k * threshold {
                ans += 1;
            }
            // 3. 离开窗口
            s -= arr[i - k as usize + 1];
        }
        ans
    }
}
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 是 $\textit{arr}$ 的长度。
- 空间复杂度：$\mathcal{O}(1)$。仅用到若干额外变量。

## 分类题单

[如何科学刷题？](https://leetcode.cn/circle/discuss/RvFUtj/)

1. [滑动窗口与双指针（定长/不定长/单序列/双序列/三指针/分组循环）](https://leetcode.cn/circle/discuss/0viNMK/)
2. [二分算法（二分答案/最小化最大值/最大化最小值/第K小）](https://leetcode.cn/circle/discuss/SqopEo/)
3. [单调栈（基础/矩形面积/贡献法/最小字典序）](https://leetcode.cn/circle/discuss/9oZFK9/)
4. [网格图（DFS/BFS/综合应用）](https://leetcode.cn/circle/discuss/YiXPXW/)
5. [位运算（基础/性质/拆位/试填/恒等式/思维）](https://leetcode.cn/circle/discuss/dHn9Vk/)
6. [图论算法（DFS/BFS/拓扑排序/最短路/最小生成树/二分图/基环树/欧拉路径）](https://leetcode.cn/circle/discuss/01LUak/)
7. [动态规划（入门/背包/状态机/划分/区间/状压/数位/数据结构优化/树形/博弈/概率期望）](https://leetcode.cn/circle/discuss/tXLS3i/)
8. [常用数据结构（前缀和/差分/栈/队列/堆/字典树/并查集/树状数组/线段树）](https://leetcode.cn/circle/discuss/mOr1u6/)
9. [数学算法（数论/组合/概率期望/博弈/计算几何/随机算法）](https://leetcode.cn/circle/discuss/IYT3ss/)
10. [贪心与思维（基本贪心策略/反悔/区间/字典序/数学/思维/脑筋急转弯/构造）](https://leetcode.cn/circle/discuss/g6KTKL/)
11. [链表、二叉树与回溯（前后指针/快慢指针/DFS/BFS/直径/LCA/一般树）](https://leetcode.cn/circle/discuss/K0n2gO/)
12. [字符串（KMP/Z函数/Manacher/字符串哈希/AC自动机/后缀数组/子序列自动机）](https://leetcode.cn/circle/discuss/SJFwQI/)

[我的题解精选（已分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
