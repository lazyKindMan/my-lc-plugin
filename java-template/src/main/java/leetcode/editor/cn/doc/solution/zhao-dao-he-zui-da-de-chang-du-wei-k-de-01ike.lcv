#### 方法一：排序

**思路与算法**

数组 $\textit{nums}$ 中和最大的长度为 $K$ 的子序列一定是由 $\textit{nums}$ 中最大的 $K$ 个数组成的。为了使得排序寻找最大的 $K$ 个数后，还能按照它们在原数组  $\textit{nums}$ 中的顺序组成目标子序列，我们建立辅助数组 $\textit{vals}$，它的第 $i$ 个元素 $(i, \textit{nums}[i])$ 包含**下标** $i$ 本身，以及数组中的对应**数值** $\textit{nums}[i]$。

首先，我们将辅助数组按照原数组中的**数值** $\textit{nums}[i]$ 为关键字**降序**排序，排序后的前 $K$ 个元素对应原数组的数值即为原数组 $\textit{nums}$ 中最大的 $K$ 个数，对应的下标即为它们在 $\textit{nums}$ 中的下标。随后，我们将这 $K$ 个元素按照**下标** $i$ 为关键字**升序**排序，排序后的 $K$ 个数值保持了它们在原数组中的顺序，我们用新的数组顺序记录这些数值，该数组即为 $\textit{nums}$ 中和最大的长度为 $K$ 的子序列。我们返回该数组作为答案。

**代码**

* [sol1-C++]

```C++
class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        int n = nums.size();
        vector<pair<int, int>> vals;   // 辅助数组
        for (int i = 0; i < n; ++i) {
            vals.emplace_back(i, nums[i]);
        }
        // 按照数值降序排序
        sort(vals.begin(), vals.end(), [&](auto x1, auto x2) {
            return x1.second > x2.second;
        });
        // 取前 k 个并按照下标升序排序
        sort(vals.begin(), vals.begin() + k);
        vector<int> res;   // 目标子序列
        for (int i = 0; i < k; ++i) {
            res.push_back(vals[i].second);
        }
        return res;
    }
};
```

* [sol1-Python3]

```Python
class Solution:
    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:
        n = len(nums)
        vals = [[i, nums[i]] for i in range(n)]   # 辅助数组
        # 按照数值降序排序
        vals.sort(key = lambda x: -x[1])
        # 取前 k 个并按照下标升序排序
        vals = sorted(vals[:k])
        res = [val for idx, val in vals]   # 目标子序列
        return res
```

* [sol1-Java]

```Java
class Solution {
    public int[] maxSubsequence(int[] nums, int k) {
        int n = nums.length;
        int[][] vals = new int[n][2]; // 二维数组存储索引和值
        for (int i = 0; i < n; ++i) {
            vals[i][0] = i;      // 存储索引
            vals[i][1] = nums[i]; // 存储值
        }
        // 按照数值降序排序
        Arrays.sort(vals, (x1, x2) -> Integer.compare(x2[1], x1[1]));
        // 取前 k 个并按照下标升序排序
        Arrays.sort(vals, 0, k, (x1, x2) -> Integer.compare(x1[0], x2[0]));
        int[] res = new int[k]; // 目标子序列
        for (int i = 0; i < k; ++i) {
            res[i] = vals[i][1];
        }
        return res;
    }
}
```

* [sol1-C#]

```C#
public class Solution {
    public int[] MaxSubsequence(int[] nums, int k) {
        int n = nums.Length;
        int[,] vals = new int[n, 2]; // 二维数组存储索引和值
        for (int i = 0; i < n; ++i) {
            vals[i, 0] = i;      // 存储索引
            vals[i, 1] = nums[i]; // 存储值
        }
        // 按照数值降序排序
        var sortedVals = Enumerable.Range(0, n)
            .Select(i => new { Index = vals[i, 0], Value = vals[i, 1] })
            .OrderByDescending(x => x.Value)
            .ToArray();
        // 取前 k 个并按照下标升序排序
        var topK = sortedVals.Take(k)
            .OrderBy(x => x.Index)
            .ToArray();
        int[] res = new int[k]; // 目标子序列
        for (int i = 0; i < k; ++i) {
            res[i] = topK[i].Value;
        }
        return res;
    }
}
```

* [sol1-Go]

```Go
func maxSubsequence(nums []int, k int) []int {
    n := len(nums)
	vals := make([][]int, n) // 辅助数组
	for i := 0; i < n; i++ {
		vals[i] = []int{i, nums[i]}
	}
	// 按照数值降序排序
	sort.Slice(vals, func(i, j int) bool {
		return vals[i][1] > vals[j][1]
	})
	// 取前 k 个并按照下标升序排序
	sort.Slice(vals[:k], func(i, j int) bool {
		return vals[i][0] < vals[j][0]
	})
	res := make([]int, k) // 目标子序列
	for i := 0; i < k; i++ {
		res[i] = vals[i][1]
	}
	return res
}
```

* [sol1-C]

```C
typedef struct {
    int index;
    int value;
} Pair;

int compareValueDesc(const void* a, const void* b) {
    return ((Pair*)b)->value - ((Pair*)a)->value;
}

int compareIndexAsc(const void* a, const void* b) {
    return ((Pair*)a)->index - ((Pair*)b)->index;
}

int* maxSubsequence(int* nums, int numsSize, int k, int* returnSize) {
    Pair* vals = (Pair*)malloc(numsSize * sizeof(Pair)); // 辅助数组
    for (int i = 0; i < numsSize; ++i) {
        vals[i].index = i;
        vals[i].value = nums[i];
    }
    // 按照数值降序排序
    qsort(vals, numsSize, sizeof(Pair), compareValueDesc);
    // 取前 k 个并按照下标升序排序
    qsort(vals, k, sizeof(Pair), compareIndexAsc);
    int* res = (int*)malloc(k * sizeof(int)); // 目标子序列
    for (int i = 0; i < k; ++i) {
        res[i] = vals[i].value;
    }
    *returnSize = k;
    free(vals);
    return res;
}
```

* [sol1-JavaScript]

```JavaScript
var maxSubsequence = function(nums, k) {
    const n = nums.length;
    const vals = []; // 辅助数组
    for (let i = 0; i < n; ++i) {
        vals.push({ index: i, value: nums[i] }); // 存储索引和值
    }
    // 按照数值降序排序
    vals.sort((x1, x2) => x2.value - x1.value);
    // 取前 k 个并按照下标升序排序
    const topK = vals.slice(0, k); // 获取前 k 个元素
    topK.sort((x1, x2) => x1.index - x2.index); // 对前 k 个元素按索引升序排序
    const res = []; // 目标子序列
    for (let i = 0; i < k; ++i) {
        res.push(topK[i].value); // 将排序后的值加入结果
    }
    return res;
};
```

* [sol1-TypeScript]

```TypeScript
function maxSubsequence(nums: number[], k: number): number[] {
    const n = nums.length;
    const vals: { index: number; value: number }[] = []; // 辅助数组
    for (let i = 0; i < n; ++i) {
        vals.push({ index: i, value: nums[i] }); // 存储索引和值
    }
    // 按照数值降序排序
    vals.sort((x1, x2) => x2.value - x1.value);
    // 取前 k 个并按照下标升序排序
    const topK = vals.slice(0, k); // 获取前 k 个元素
    topK.sort((x1, x2) => x1.index - x2.index); // 对前 k 个元素按索引升序排序
    const res: number[] = []; // 目标子序列
    for (let i = 0; i < k; ++i) {
        res.push(topK[i].value); // 将排序后的值加入结果
    }
    return res;
};
```

* [sol1-Rust]

```Rust
impl Solution {
    pub fn max_subsequence(nums: Vec<i32>, k: i32) -> Vec<i32> {
        let n = nums.len();
        let mut vals: Vec<(usize, i32)> = Vec::new(); // 辅助数组
        for i in 0..n {
            vals.push((i, nums[i]));
        }
        // 按照数值降序排序
        vals.sort_by(|x1, x2| x2.1.cmp(&x1.1));
        // 取前 k 个并按照下标升序排序
        vals[0..k as usize].sort_by(|x1, x2| x1.0.cmp(&x2.0));
        let mut res: Vec<i32> = Vec::new(); // 目标子序列
        for i in 0..k as usize {
            res.push(vals[i].1);
        }
        res
    }
}
```

**复杂度分析**

- 时间复杂度：$O(n \log n)$，其中 $n$ 为 $\textit{nums}$ 的长度。即为对辅助数组排序的时间复杂度。

- 空间复杂度：$O(n)$，即为辅助数组的空间开销。

